{"version":3,"sources":["./src/app/auth/login/login.component.html","./src/app/auth/password-reset-request/password-reset-request.component.html","./src/app/auth/password-reset/password-reset.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.css","./src/app/auth/login/login.component.ts","./src/app/auth/password-reset-request/password-reset-request.component.css","./src/app/auth/password-reset-request/password-reset-request.component.ts","./src/app/auth/password-reset/password-reset.component.css","./src/app/auth/password-reset/password-reset.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["export default \"<div class=\\\"container login-container\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n    <form [formGroup]=\\\"loginForm\\\" fxFlex=\\\"30%\\\" fxFlex.sm=\\\"50%\\\" fxFlex.xs=\\\"90%\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-title>angular-material-template</mat-card-title>\\r\\n            <mat-card-subtitle>Log in to your account</mat-card-subtitle>\\r\\n            <mat-card-content>\\r\\n\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                    <input id=\\\"emailInput\\\" matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" autocomplete=\\\"email\\\"\\r\\n                        type=\\\"email\\\">\\r\\n\\r\\n                    <mat-error id=\\\"invalidEmailError\\\" *ngIf=\\\"loginForm.controls['email'].hasError('email')\\\">\\r\\n                        Please enter a valid email address\\r\\n                    </mat-error>\\r\\n                    <mat-error id=\\\"requiredEmailError\\\" *ngIf=\\\"loginForm.controls['email'].hasError('required')\\\">\\r\\n                        Email is\\r\\n                        <strong>required</strong>\\r\\n                    </mat-error>\\r\\n\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                    <input id=\\\"passwordInput\\\" matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\"\\r\\n                        autocomplete=\\\"current-password\\\">\\r\\n                    <mat-error id=\\\"requiredPasswordError\\\" *ngIf=\\\"loginForm.controls['email'].hasError('required')\\\">\\r\\n                        Password is\\r\\n                        <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <div class=\\\"full-width\\\">\\r\\n                    <mat-slide-toggle formControlName=\\\"rememberMe\\\">Remember my email address</mat-slide-toggle>\\r\\n                </div>\\r\\n\\r\\n            </mat-card-content>\\r\\n\\r\\n            <mat-card-actions class=\\\"login-actions\\\">\\r\\n                <button mat-raised-button id=\\\"login\\\" color=\\\"primary\\\" [disabled]=\\\"loginForm.invalid || loading\\\"\\r\\n                    (click)=\\\"login()\\\">Login</button>\\r\\n                <button mat-button id=\\\"resetPassword\\\" (click)=\\\"resetPassword()\\\" type=\\\"button\\\">Reset Password</button>\\r\\n            </mat-card-actions>\\r\\n\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-progress-bar *ngIf=\\\"loading\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n    </form>\\r\\n</div>\"","export default \"<div class=\\\"container login-container\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n    <form [formGroup]=\\\"form\\\" fxFlex=\\\"30%\\\" fxFlex.sm=\\\"50%\\\" fxFlex.xs=\\\"90%\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-title>angular-material-template</mat-card-title>\\r\\n            <mat-card-subtitle>Reset your password</mat-card-subtitle>\\r\\n            <mat-card-content>\\r\\n\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                    <input id=\\\"emailInput\\\" matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" autocomplete=\\\"email\\\" type=\\\"email\\\">\\r\\n\\r\\n                    <mat-error id=\\\"invalidEmailError\\\" *ngIf=\\\"form.controls['email'].hasError('email')\\\">\\r\\n                        Please enter a valid email address\\r\\n                    </mat-error>\\r\\n                    <mat-error id=\\\"requiredEmailError\\\" *ngIf=\\\"form.controls['email'].hasError('required')\\\">\\r\\n                        Email is\\r\\n                        <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n\\r\\n            </mat-card-content>\\r\\n\\r\\n            <mat-card-actions class=\\\"login-actions\\\">\\r\\n                <button id=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" [disabled]=\\\"form.invalid || loading\\\"\\r\\n                    (click)=\\\"resetPassword()\\\">Reset Password</button>\\r\\n                <button id=\\\"cancel\\\" mat-button (click)=\\\"cancel()\\\">Cancel</button>\\r\\n            </mat-card-actions>\\r\\n\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-progress-bar *ngIf=\\\"loading\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n    </form>\\r\\n</div>\"","export default \"<div class=\\\"container login-container\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <form [formGroup]=\\\"form\\\" fxFlex=\\\"30%\\\" fxFlex.sm=\\\"50%\\\" fxFlex.xs=\\\"90%\\\">\\r\\n      <mat-card>\\r\\n          <mat-card-title>angular-material-template</mat-card-title>\\r\\n          <mat-card-subtitle>Reset your password</mat-card-subtitle>\\r\\n          <mat-card-content>\\r\\n\\r\\n              <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input id=\\\"emailInput\\\" matInput readonly disabled [value]=\\\"email\\\">\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"full-width\\\">\\r\\n                <input id=\\\"passwordInput\\\" matInput placeholder=\\\"New Password\\\" formControlName=\\\"newPassword\\\" [type]=\\\"hideNewPassword ? 'password' : 'text'\\\" autocomplete=\\\"new-password\\\">\\r\\n                <mat-icon id=\\\"togglePasswordVisibility\\\" matSuffix (click)=\\\"hideNewPassword = !hideNewPassword\\\">\\r\\n                  {{hideNewPassword ? 'visibility' : 'visibility_off'}}\\r\\n                </mat-icon>\\r\\n          \\r\\n                <mat-error *ngIf=\\\"form.controls['newPassword'].hasError('required')\\\">\\r\\n                  Please enter a new password\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"full-width\\\">\\r\\n                <input id=\\\"passwordConfirmInput\\\" matInput placeholder=\\\"New Password Confirmation\\\" formControlName=\\\"newPasswordConfirm\\\" [type]=\\\"hideNewPasswordConfirm ? 'password' : 'text'\\\" autocomplete=\\\"new-password\\\">\\r\\n                <mat-icon id=\\\"togglePasswordConfirmVisibility\\\" matSuffix (click)=\\\"hideNewPasswordConfirm = !hideNewPasswordConfirm\\\">\\r\\n                  {{hideNewPasswordConfirm ? 'visibility' : 'visibility_off'}}\\r\\n                </mat-icon>\\r\\n          \\r\\n                <mat-error *ngIf=\\\"form.controls['newPasswordConfirm'].hasError('required')\\\">\\r\\n                  Please enter a your current password\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n\\r\\n          </mat-card-content>\\r\\n\\r\\n          <mat-card-actions class=\\\"login-actions\\\">\\r\\n              <button id=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" [disabled]=\\\"form.invalid || loading\\\" (click)=\\\"resetPassword()\\\">OK</button>\\r\\n              <button id=\\\"cancel\\\" mat-button (click)=\\\"cancel()\\\">Back to Login</button>\\r\\n          </mat-card-actions>\\r\\n\\r\\n      </mat-card>\\r\\n\\r\\n      <mat-progress-bar *ngIf=\\\"loading\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n  </form>\\r\\n</div>\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { PasswordResetRequestComponent } from './password-reset-request/password-reset-request.component';\r\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'password-reset-request', component: PasswordResetRequestComponent },\r\n  { path: 'password-reset', component: PasswordResetComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { PasswordResetRequestComponent } from './password-reset-request/password-reset-request.component';\r\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    AuthRoutingModule\r\n  ],\r\n  declarations: [LoginComponent, PasswordResetRequestComponent, PasswordResetComponent]\r\n})\r\nexport class AuthModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { EMPTY, of } from 'rxjs';\r\nimport 'rxjs/add/operator/delay';\r\n\r\nimport { AuthenticationService } from '../../core/services/auth.service';\r\nimport { NotificationService } from '../../core/services/notification.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n    loading: boolean;\r\n\r\n    constructor(private router: Router,\r\n        private titleService: Title,\r\n        private notificationService: NotificationService,\r\n        private authenticationService: AuthenticationService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.titleService.setTitle('angular-material-template - Login');\r\n        this.authenticationService.logout();\r\n        this.createForm();\r\n    }\r\n\r\n    private createForm() {\r\n        const savedUserEmail = localStorage.getItem('savedUserEmail');\r\n\r\n        this.loginForm = new FormGroup({\r\n            email: new FormControl(savedUserEmail, [Validators.required, Validators.email]),\r\n            password: new FormControl('', Validators.required),\r\n            rememberMe: new FormControl(savedUserEmail !== null)\r\n        });\r\n    }\r\n\r\n    login() {\r\n        const email = this.loginForm.get('email').value;\r\n        const password = this.loginForm.get('password').value;\r\n        const rememberMe = this.loginForm.get('rememberMe').value;\r\n\r\n        this.loading = true;\r\n        this.authenticationService\r\n            .login(email.toLowerCase(), password)\r\n            .subscribe(\r\n                data => {\r\n                    if (rememberMe) {\r\n                        localStorage.setItem('savedUserEmail', email);\r\n                    } else {\r\n                        localStorage.removeItem('savedUserEmail');\r\n                    }\r\n                    this.router.navigate(['/']);\r\n                },\r\n                error => {\r\n                    this.notificationService.openSnackBar(error.error);\r\n                    this.loading = false;\r\n                }\r\n            );\r\n    }\r\n\r\n    resetPassword() {\r\n        this.router.navigate(['/auth/password-reset-request']);\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcGFzc3dvcmQtcmVzZXQtcmVxdWVzdC9wYXNzd29yZC1yZXNldC1yZXF1ZXN0LmNvbXBvbmVudC5jc3MifQ== */\"","import { Router } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\nimport { AuthenticationService } from '../../core/services/auth.service';\r\nimport { NotificationService } from './../../core/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-password-reset-request',\r\n  templateUrl: './password-reset-request.component.html',\r\n  styleUrls: ['./password-reset-request.component.css']\r\n})\r\nexport class PasswordResetRequestComponent implements OnInit {\r\n\r\n  private email: string;\r\n  form: FormGroup;\r\n  loading: boolean;\r\n\r\n  constructor(private authService: AuthenticationService,\r\n    private notificationService: NotificationService,\r\n    private titleService: Title,\r\n    private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.titleService.setTitle('angular-material-template - Password Reset Request');\r\n\r\n    this.form = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email])\r\n    });\r\n\r\n    this.form.get('email').valueChanges\r\n      .subscribe((val: string) => { this.email = val.toLowerCase(); });\r\n  }\r\n\r\n  resetPassword() {\r\n    this.loading = true;\r\n    this.authService.passwordResetRequest(this.email)\r\n      .subscribe(\r\n        results => {\r\n          this.router.navigate(['/auth/login']);\r\n          this.notificationService.openSnackBar('Password verification mail has been sent to your email address.');\r\n        },\r\n        error => {\r\n          this.loading = false;\r\n          this.notificationService.openSnackBar(error.error);\r\n        }\r\n      );\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50LmNzcyJ9 */\"","import { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router, ParamMap } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\nimport { NotificationService } from '../../core/services/notification.service';\r\nimport { AuthenticationService } from '../../core/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-password-reset',\r\n  templateUrl: './password-reset.component.html',\r\n  styleUrls: ['./password-reset.component.css']\r\n})\r\nexport class PasswordResetComponent implements OnInit {\r\n\r\n  private token: string;\r\n  email: string;\r\n  form: FormGroup;\r\n  loading: boolean;\r\n  hideNewPassword: boolean;\r\n  hideNewPasswordConfirm: boolean;\r\n\r\n  constructor(private activeRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private authService: AuthenticationService,\r\n    private notificationService: NotificationService,\r\n    private titleService: Title) {\r\n\r\n    this.titleService.setTitle('angular-material-template - Password Reset');\r\n    this.hideNewPassword = true;\r\n    this.hideNewPasswordConfirm = true;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.activeRoute.queryParamMap.subscribe((params: ParamMap) => {\r\n      this.token = params.get('token');\r\n      this.email = params.get('email');\r\n\r\n      if (!this.token || !this.email) {\r\n        this.router.navigate(['/']);\r\n      }\r\n    });\r\n\r\n    this.form = new FormGroup({\r\n      newPassword: new FormControl('', Validators.required),\r\n      newPasswordConfirm: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  resetPassword() {\r\n\r\n    const password = this.form.get('newPassword').value;\r\n    const passwordConfirm = this.form.get('newPasswordConfirm').value;\r\n\r\n    if (password !== passwordConfirm) {\r\n      this.notificationService.openSnackBar('Passwords do not match');\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n\r\n    this.authService.passwordReset(this.email, this.token, password, passwordConfirm)\r\n      .subscribe(\r\n        data => {\r\n          this.notificationService.openSnackBar('Your password has been changed.');\r\n          this.router.navigate(['/auth/login']);\r\n        },\r\n        error => {\r\n          this.notificationService.openSnackBar(error.error);\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}